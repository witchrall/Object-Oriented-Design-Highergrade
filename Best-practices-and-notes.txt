Best Practice
In well-structured MVC applications:
    *Controllers typically catch exceptions from the service or integration layers.
    *They translate them into user-friendly error messages or error views, so that raw exceptions don't reach the View.
=========================== Exception propagating up====================================

In the MVC (Model-View-Controller) design pattern in Java 
(or generally), if an exception is thrown in a lower layer (e.g., Integration or Model),
and it is not caught in the layers in between (like Controller), then it will propagate
up the call stack all the way to the View, unless a layer catches it.

===============================Throw or Throw New=====================================================
The difference between `throw` and `throw new` inside a `catch` block is crucial in Java and depends on **what you want to do with the exception**.

---

### üîÅ `throw;` ‚Äî Re-throw the **same exception**

Actually, **Java does not allow just `throw;`** like C# does. In Java, you must **specify the exception object** to throw. So this would be:

```java
catch (IOException e) {
    throw e;  // Re-throws the same exception
}
```

This keeps the original stack trace and exception object exactly as it was. Use this when:

* You want to let the exception bubble up unchanged.
* You don‚Äôt want to lose the original context.

---

### üÜï `throw new SomeException()` ‚Äî Throw a **new exception**

```java
catch (IOException e) {
    throw new RuntimeException("Failed to read file", e);
}
```

Use this when:

* You want to **wrap** the original exception into a higher-level one (common in layered architecture).
* You want to **add context or a message** specific to the layer or business logic.
* You‚Äôre converting a **checked exception to an unchecked one** (e.g., `IOException` to `RuntimeException`).

This changes the stack trace, unless you **pass the original exception as the cause** (`new RuntimeException("msg", e)`), which is a good practice.

---

### ‚úÖ Best Practices

| Situation                                    | Use                                                     |
| -------------------------------------------- | ------------------------------------------------------- |
| Preserve exact original exception            | `throw e;`                                              |
| Add context, wrap exception                  | `throw new MyException("Message", e);`                  |
| Replace with a different exception           | `throw new OtherException(...);`                        |
| Avoid losing cause (always use `e` as cause) | `throw new X("...", e);` not just `throw new X("...");` |

---

### üö´ Don‚Äôt do this:

```java
catch (IOException e) {
    throw new RuntimeException("Something went wrong"); // BAD: loses original cause
}
```

You lose the original exception (`e`) and its stack trace, which makes debugging harder.

---

### Summary

* Use `throw e;` when you want to re-throw the same exception.
* Use `throw new` when you want to wrap or replace the exception ‚Äî **but always include the original as the cause** if you want to keep the trace.
======================================= Declaring an exception in the throws clause==================================================================


whether a method should declare an exception in its `throws` clause depends entirely on whether the exception is *checked* or *unchecked***. Here's how it breaks down:

---

### ‚úÖ 1. **Checked Exceptions**

Checked exceptions are **subclasses of `Exception`** (but **not** `RuntimeException`).

> **Examples:** `IOException`, `SQLException`, `ParseException`, etc.

* **If your method can throw a checked exception** (whether it originates there or is just propagated), **you must declare it** in the method signature **or catch it.**

```java
// This method doesn't throw the IOException itself,
// but it lets it propagate, so it must declare it.
public void readFile(String path) throws IOException {
    Files.readAllLines(Path.of(path));
}
```

If you don‚Äôt declare it and don‚Äôt catch it ‚Äî the code **won‚Äôt compile**.

---

### ‚ö†Ô∏è 2. **Unchecked Exceptions**

Unchecked exceptions are **subclasses of `RuntimeException`**.

> **Examples:** `NullPointerException`, `IllegalArgumentException`, `IndexOutOfBoundsException`, etc.

* You **don‚Äôt need to declare** unchecked exceptions in the `throws` clause ‚Äî even if your method throws or propagates them.

```java
public void doSomething(String input) {
    if (input == null) {
        throw new IllegalArgumentException("Input cannot be null");
    }
}
```

No `throws` clause is needed here.

---

### ü§î What if you're **only passing through** a checked exception?

Yes ‚Äî even if the method doesn‚Äôt throw the exception itself but **calls another method that does**, and you **don‚Äôt catch** it, then **you must declare it**:

```java
public void processFile(String path) throws IOException {
    readFile(path); // readFile throws IOException
}
```

If you catch it:

```java
public void processFile(String path) {
    try {
        readFile(path);
    } catch (IOException e) {
        // handle or log
    }
}
```

Then no `throws IOException` needed.

---
### ‚úÖ Summary Table

| Exception Type                     | Needs `throws` Clause? | Can Be Caught? |
| ---------------------------------- | ---------------------- | -------------- |
| **Checked** (`Exception`)          | Yes (if not caught)    | Yes            |
| **Unchecked** (`RuntimeException`) | No                     | Yes            |

=========================================The strategy pattern ===================================================
Is the strategy patttern used in java what we see in some apps or websites when trying to use a filter to look for something

Yes, the **Strategy pattern** is *often* used behind the scenes in Java applications (and other languages) to implement flexible **filtering systems**‚Äîlike the kind you see in apps or websites when you're searching or narrowing down results.

---

### üîç Quick Recap: What is the Strategy Pattern?

The **Strategy pattern** allows you to define a family of algorithms (strategies), put each one in a separate class, and make them interchangeable at runtime. This helps you follow the **Open/Closed Principle** (open for extension, closed for modification).

---

### ‚úÖ In the Context of Filters (like on e-commerce or job sites)

Let‚Äôs say you're on a shopping website, and you can filter by:

* Price (e.g., Low to High)
* Brand (e.g., Nike, Adidas)
* Rating
* Category

Each of these can be implemented as a **strategy**:

```java
// The Strategy Interface
public interface FilterStrategy {
    boolean apply(Product product);
}

// Concrete Strategies
public class PriceFilter implements FilterStrategy {
    private double maxPrice;
    public PriceFilter(double maxPrice) { this.maxPrice = maxPrice; }

    @Override
    public boolean apply(Product product) {
        return product.getPrice() <= maxPrice;
    }
}

public class BrandFilter implements FilterStrategy {
    private String brand;
    public BrandFilter(String brand) { this.brand = brand; }

    @Override
    public boolean apply(Product product) {
        return product.getBrand().equalsIgnoreCase(brand);
    }
}
```

You can then **combine these strategies dynamically** based on user input:

```java
List<FilterStrategy> strategies = new ArrayList<>();
strategies.add(new PriceFilter(100.0));
strategies.add(new BrandFilter("Nike"));

List<Product> filtered = products.stream()
    .filter(p -> strategies.stream().allMatch(s -> s.apply(p)))
    .collect(Collectors.toList());
```

---

### üß† Why Use the Strategy Pattern for Filters?

* **Dynamic behavior**: Filters can be added or changed at runtime.
* **Cleaner code**: Each filter is encapsulated and testable.
* **Extensibility**: Adding a new filter doesn‚Äôt require modifying existing code.

---

### TL;DR

Yes, the **Strategy pattern is commonly used** in filtering systems like those you see in apps and websites. It provides a clean way to implement and manage flexible, user-driven search/filter behavior.
====================================================================================================
